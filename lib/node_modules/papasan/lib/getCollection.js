
/** @file getCollection.js
 * \brief GET method handler for collections
 */

var URL  = require('url');
var FS   = require('fs');
var spawn  = require('child_process').spawn;

/** Collection GET handler
 */

module.exports = function ( request, response ) {
    var CATRDF = this.CATRDF;
    var gather = this.papasan.gather;

    gather.prepare.call( response );

    var ok           = this.papasan.responder.ok.bind(response);
    var not_found    = this.papasan.responder.not_found.bind(response);
    var server_error = this.papasan.responder.server_error.bind(response);

    var url = URL.parse( request.url );
    var target = this.BASE + url.pathname;
    this.logger.log( "getCollection: " + target );

    function finish( code, signal ) {
        if ( code === 0 )  return ok(request, '');
        response.logger.log( "Process exit with: " + code + '  signal="' + signal + '"' );
        // this should become some standard XML error format
        server_error( error );
    }

    function prepend_db( filename ) {
        return target + '/' + filename;
    }

    function select_uuid( filename ) {
        return new RegExp('^........-....-....-....-............\.rdf$').test(filename);
    }

    function concat_files( err, files ) {
        // not really a 404 - needs to be collection empty
        if ( err != null ) {
            if ( err.code !== "ENOENT" ) return not_found( 'getCollection: ' + err );
        }

        var pid = spawn( CATRDF, files.filter(select_uuid).map(prepend_db) );

        pid.on( 'close', finish );
        pid.stdout.on( 'data', gather.output.bind(response) );
        pid.stderr.on( 'data', gather.error.bind(response) );
    }

    FS.readdir( target, concat_files );
};

// vim:autoindent expandtab sw=4 syntax=javascript
